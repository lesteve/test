# Strongly inspired from
# https://github.com/pyodide/pyodide/blob/main/.github/workflows/main.yml and
# also https://github.com/pyodide/pyodide/blob/main/.circleci/config.yml for
# the debug tweaks

name: Build Pyodide debug

on:
  push:

concurrency:
  group: main-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  build-pyodide-debug:
    runs-on: ubuntu-latest
    steps:
      - name: Create artifact
        run: |
          mkdir artifact-dir
          echo test > artifact-dir/test
          echo bla > artifact-dir/bla

      - name: Store artifacts build
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: |
            ./artifact-dir

      - name: clean-up
        run: rm -rf artifact

      - name: Download latest Pyodide debug build
        uses: actions/github-script@v6
        with:
          script: |
            var fs = require("fs");
            const owner = "lesteve";
            const repo = "test";

            const artifacts_response = await github.rest.actions.listArtifactsForRepo({owner: owner, repo: repo});
            console.log(`Found ${artifacts_response.data.total_count} artifacts`);
            artifacts = artifacts_response.data.artifacts;

            const most_recent_artifact = artifacts[0];
            console.log(`action url: https://github.com/${owner}/${repo}/actions/runs/${most_recent_artifact.workflow_run.id}`);
            console.log('artifact:', most_recent_artifact);

            const response = await github.rest.actions.downloadArtifact({
                owner: owner, repo: repo, artifact_id: most_recent_artifact.id, archive_format: "zip"});
            console.log(`Downloaded ${response.data.byteLength / 1000000} MB`);

            await fs.appendFile("artifact.zip", Buffer.from(response.data), function (err) {
                if (err) throw err;
            });


      - name: Unzip artifact
        run: |
          unzip artifact.zip -d artifact-dir
          ls -ltrh artifact-dir
